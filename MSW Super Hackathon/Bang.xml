<?xml version="1.0" encoding="utf-8"?>
<CodeBlockFile xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Id="62f56a7f-cced-43de-a136-353489d5c032" Language="Lua" Name="Bang" Type="Extend" Source="None" Target="MOD.Core.AttackComponent" ModifyTime="2022-11-27T22:40:24.267882+09:00">
  <CoreVersion Major="0" Minor="2" />
  <ScriptVersion Major="1" Minor="0" />
  <Description />
  <Properties>
    <CodeBlockProperty Name="attackInterval" Type="number" DefaultValue="1" SyncDirection="None" />
    <CodeBlockProperty Name="damage" Type="number" DefaultValue="0" SyncDirection="None" />
  </Properties>
  <Methods>
    <CodeBlockMethod Name="CalcDamage" ExecSpace="All">
      <Return Type="int" SyncDirection="None" />
      <Arguments>
        <CodeBlockProperty Name="attacker" Type="Entity" SyncDirection="None" />
        <CodeBlockProperty Name="defender" Type="Entity" SyncDirection="None" />
        <CodeBlockProperty Name="attackInfo" Type="string" SyncDirection="None" />
      </Arguments>
      <Code><![CDATA[
if(defender.Common.is_monster) then 
	return self.damage*1.3
elseif(defender.Common.is_player) then 
	return self.damage*0.7
else
	return self.damage
end
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="IsAttackTarget" ExecSpace="All">
      <Return Type="boolean" SyncDirection="None" />
      <Arguments>
        <CodeBlockProperty Name="defender" Type="Entity" SyncDirection="None" />
        <CodeBlockProperty Name="attackInfo" Type="string" SyncDirection="None" />
      </Arguments>
      <Code><![CDATA[
if(defender.Common == nil) then
	return false
elseif (defender.Common.is_left == self.Entity.Common.is_left) or defender.Common.is_neutral == true then -- 같은 팀이고, 중립몬스터면 공격X
	return false
elseif (defender.Common.is_left ~= self.Entity.Common.is_left) and defender.Common.is_neutral == false then -- 같은팀, 중립이 아니면 공격
	return true
end
return __base:IsAttackTarget(defender, attackInfo)
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="AttackNear" ExecSpace="All">
      <Return Type="void" SyncDirection="None" />
      <Code><![CDATA[
local transformComponent = self.Entity.TransformComponent
if isvalid(transformComponent) then
	local worldPosition = transformComponent.WorldPosition
	local scaleX = math.abs(transformComponent.Scale.x)
	local scaleY = math.abs(transformComponent.Scale.y)
	self._T.shape.Size = Vector2(self._T.spriteSize.x * scaleX+1, self._T.spriteSize.y * scaleY+1)
	self._T.shape.Position = Vector2(worldPosition.x - 0.5 + self._T.positionOffset.x * scaleX, worldPosition.y - 0.5 + self._T.positionOffset.y * scaleY)
end

self:AttackFast(self._T.shape, nil)
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="OnBeginPlay" ExecSpace="ServerOnly">
      <Return Type="void" SyncDirection="None" />
      <Code><![CDATA[

self._T.shape = BoxShape(Vector2.zero, Vector2.one, 0)
-- sprite 사이즈를 가져와 공격 영역으로 사용한다
_ResourceService:PreloadAsync({self.Entity.SpriteRendererComponent.SpriteRUID}, function()
	local clip = _ResourceService:LoadAnimationClipAndWait(self.Entity.SpriteRendererComponent.SpriteRUID)
	local lastFrameSprite = clip.Frames[10].FrameSprite
	local lastSpriteSizeInPixel = Vector2(lastFrameSprite.Width, lastFrameSprite.Height)
	local ppu = lastFrameSprite.PixelPerUnit

	self._T.spriteSize = lastSpriteSizeInPixel / ppu
	self._T.positionOffset = (lastSpriteSizeInPixel / 2 - lastFrameSprite.PivotPixel:ToVector2()) / ppu
	
	_TimerService:SetTimerRepeat(function() self:AttackNear() end,1.2)
end)
]]></Code>
    </CodeBlockMethod>
  </Methods>
  <EntityEventHandlers />
</CodeBlockFile>