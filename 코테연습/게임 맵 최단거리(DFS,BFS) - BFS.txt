using System;
using System.Collections.Generic;

class Solution {
    //maps 행과 열 길이
    int n = 0;
    int m = 0;

    //상하좌우 이동
    int[] dx = {-1, 1, 0, 0};
    int[] dy = {0, 0, -1, 1};

    //큐 선언
    Queue<(int, int)> q = new Queue<(int, int)>();

    //bfs
    public void bfs(int i, int j, int[,] arr)
    {
        //큐에 지금 값 넣기
        q.Enqueue((i,j));

        //큐가 없어질 때 까지 반복
        while(q.Count != 0)
        {
            //int형으로 q값 받기
            (int a, int b) = q.Dequeue();

            //상하좌우 4번 반복
            for(int k = 0; k < 4; k++)
            {
                //현재 받은 위치에서 dx, dy 만큼 이동
                int nx = a + dx[k];
                int ny = b + dy[k];

                //이동한 위치 nx, ny가 0보다 작거나 maps 길이 보다 크면 continue
                if(nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
                //이동한 위치 nx, ny의 값이 (벽) 0이면 continue
                if(arr[nx, ny] == 0) continue;
                //이동한 위치 nx, ny의 값이 (길) 1이면 카운트 더하고 현재 위치 큐에 저장
                if(arr[nx, ny] == 1)
                {
                    arr[nx, ny] = arr[a, b] + 1;
                    q.Enqueue((nx, ny));
                }
            }
        }
    }

    public int solution(int[,] maps)
    {
        //maps의 길이저장
        n = maps.GetLength(0);
        m = maps.GetLength(1);

        //bfs진행
        bfs(0, 0, maps);

        //마지막 길이, 즉 상대팀 진영에 도달하지 못하면 값은 1으로 -1을 반환
        //도달하면 카운트 된 수를 반환
        if(maps[n - 1, m - 1] == 1) return -1;
        else return (maps[n - 1, m - 1]);
    }

}